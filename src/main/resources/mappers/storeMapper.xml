<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.icia.wapoo.dao.StoreDao">
    <insert id="insertStore" useGeneratedKeys="true" keyColumn="storeId" keyProperty="storeId" parameterType="Store">
        INSERT INTO `store`
        SET
        `regDate` = NOW(),
        updateDate = NOW(),
        `status` = 'S',
        `name` = #{name},
        phone = #{phone},
        address = #{address},
        addressDetail = #{addressDetail},
        localx = #{localx},
        localy = #{localy},
        storeKind = #{storeKind},
        `body` = #{body},
        owner_id = #{owner_id}
    </insert>
    <insert id="insertStoreFile" parameterType="imageFile">
        INSERT INTO store_file
        SET
        storefileId = #{fileId},
        regDate = NOW(),
        orgName = #{orgName},
        `name` = #{name},
        filetype = #{filetype},
        filesize = #{filesize},
        store_id = #{ref_id}
    </insert>
    <resultMap id="exampleResultMap" type="java.util.Map">
        <result column="regDate" property="regDate"/>
        <result column="storename" property="storename"/>
        <result column="status" property="status"/>
        <result column="membername" property="membername"/>
        <result column="storeId" property="storeId"/>
    </resultMap>
    <select id="selectStoreList" resultMap="exampleResultMap">
        SELECT
            regDate,
            s.`name` storename,
            s.`status` as status,
            address as address,
            m.`name` membername,
            s.storeId storeId
        FROM store s, `member` m
        WHERE s.owner_id = m.memberId
        <if test="!option.equals('ALL')">
            AND s.`status` = #{option}
        </if>
        ORDER BY regDate DESC
            LIMIT #{startLimit}, #{endLimit}
    </select>
    <select id="selectStoreListCount" resultType="int">
        SELECT COUNT(*) AS result
        FROM store
        <if test="!option.equals('ALL')">
            WHERE status = #{option}
        </if>
    </select>
    <update id="updateStoreStatus">
        UPDATE store
        SET STATUS = #{status}
        WHERE storeId = #{storeId}
    </update>
    <select id="selectStoreById" parameterType="int" resultType="Store">
        SELECT *
        FROM store
        WHERE owner_id = #{memberId};
    </select>
    <insert id="insertFood" useGeneratedKeys="true" keyColumn="foodId" keyProperty="foodId" parameterType="Food">
        INSERT INTO `food`
        SET
            `regDate` = NOW(),
            updateDate = NOW(),
            `status` = '1',
            `name` = #{name},
            `description` = #{description},
            price = #{price},
            store_id = #{store_id}
    </insert>
    <insert id="insertFoodFile" parameterType="imageFile">
        INSERT INTO food_file
        SET
            foodfileId = #{fileId},
            regDate = NOW(),
            orgName = #{orgName},
            `name` = #{name},
            filetype = #{filetype},
            filesize = #{filesize},
            food_id = #{ref_id}
    </insert>
    <select id="selectStoreFileList" parameterType="int" resultType="imageFile">
        SELECT *
        FROM store_file
        WHERE store_id = #{storeId}
    </select>

    <resultMap id="FoodResultMap" type="java.util.Map">
        <result column="regDate" property="regDate"/>
        <result column="foodname" property="foodname"/>
        <result column="status" property="status"/>
        <result column="description" property="description"/>
        <result column="price" property="price"/>
        <result column="filename" property="filename"/>
        <result column="foodId" property="foodId"/>
    </resultMap>
    <select id="selectFoodList" resultMap="FoodResultMap">
        SELECT
        fo.regDate regDate,
        fo.`name` foodname,
        fo.`status` as status,
        fo.`description` as description,
        fo.price as price,
        fi.`name` filename,
        fo.foodId foodId
        FROM food fo, food_file fi
        WHERE fo.foodId = fi.food_id
        AND fo.store_id = #{store_id}
        <if test="!option.equals('ALL')">
            AND fo.`status` = #{option}
        </if>
        ORDER BY fo.regDate DESC
        LIMIT #{startLimit}, #{endLimit}
    </select>
    <select id="selectFoodListCount" resultType="int">
        SELECT COUNT(*) AS result
        FROM food
        WHERE store_id = #{store_id}
        <if test="!option.equals('ALL')">
            AND status = #{option}
        </if>
    </select>
    <select id="selectNearStoresList" resultType="Map">
        SELECT *, (
        ROUND(6371 * ACOS( COS( RADIANS(#{lat}) )
        * COS( RADIANS( s.localy ) )
        * COS( RADIANS( s.localx )
        - RADIANS( #{lon}) )
        + SIN( RADIANS(#{lat}) )
        * SIN( RADIANS( s.localy ) ) ), 2)) AS distance
        FROM store s, (
                SELECT fileUrl, store_id FROM (
                      SELECT name fileUrl,
                             store_id,
                             ROW_NUMBER() OVER (PARTITION BY store_id
                                                ORDER BY regDate DESC) as rankNo
                      FROM store_file
                ) t
                WHERE rankNo = 1
            ) f
        WHERE s.storeId = f.store_id
        <if test="!options.equals('ALL')">
        AND s.storeKind LIKE CONCAT('%', #{options}, '%')
        </if>
        AND s.status = 'Y'
        <![CDATA[
        HAVING distance < #{radius}
        ]]>
        ORDER BY distance
        LIMIT #{loadFrom},#{qantity};
    </select>
    <select id="selectStoreByStoreId" resultType="Store">
        SELECT
            `name`,
            phone,
            address,
            addressDetail,
            localx,
            localy,
            storeKind,
            `body`
        FROM store
        WHERE STATUS = 'Y'
          AND storeId = #{storeId};
    </select>
    <select id="selectAllFoods" resultType="Map">
        SELECT
            fo.foodId,
            fo.`name`,
            fo.`description`,
            fo.price,
            fo.`status`,
            fi.`name` fileUrl
        FROM food fo, food_file fi
        WHERE fo.foodId = fi.food_id
          AND fo.store_id = #{storeId}
          AND NOT fo.`status` = 3;
    </select>
    <update id="updateFood">
        UPDATE food
        SET updateDate = NOW(),
            `name`= #{foodname},
            `description` = #{desc},
            `status` = #{status}
        WHERE foodId = #{foodId}
    </update>
    <select id="selectFoodByFoodId" resultType="Map">
        SELECT fo.name name,
               fo.description description,
               fo.price price,
               fo.status status,
               fo.store_id store_id,
               fi.name fileUrl,
               fo.foodId foodId
        FROM food fo, food_file fi
        WHERE fo.foodId = fi.food_id
        AND fo.foodId = #{foodId}
    </select>
</mapper>
