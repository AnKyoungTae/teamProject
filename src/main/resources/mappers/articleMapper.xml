<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.icia.wapoo.dao.ArticleDao">

<!-- 게시물 파일 등록 -->
<insert id="insertArticleFile" parameterType="imageFile">
INSERT INTO `article_file`(
	regDate,
	org_name,
	NAME,
	filetype,
	filesize,
	article_id)
VALUES (NOW(),
	#{orgName},
	#{name},
	#{filetype},
	#{filesize},
	#{ref_id});
</insert>
<!-- 게시물 이미지 조회 -->
<select id="imageFileList" resultType="ImageFile">
SELECT 
	`articlefileId` AS fileId,
	`regDate`,
	`org_name`,
	`name`,
	`filetype`,
	`filesize`,
	`article_id` AS ref_id
FROM article_file
WHERE article_id = #{articleId}

</select>


<!-- 글 조회 -->
<select id="boardSelect" parameterType="long" resultType="Article">
SELECT	IFNULL(articleId, '') AS articleId,
	IFNULL(regDate, '') AS regDate,
	IFNULL(updateDate, '') AS updateDate,
	IFNULL(title, '') AS title,
	IFNULL(BODY, '') AS BODY,
	IFNULL(hit, 1) AS hit,
	IFNULL(STATUS, '') AS STATUS,
	IFNULL(parant_id, 0) AS parant_id,
	IFNULL(board_id, 0) AS board_id,
	IFNULL(writer_id, 0) AS writer_id,
	suspend
FROM article
  	WHERE articleId = #{value}
    </select>


<!-- 글 삭제 -->
<delete id="boardDelete" parameterType="Article">
	UPDATE article
	SET STATUS = 'N'
WHERE articleId = #{value}

</delete>

<!--  이지미 삭제 -->
<delete id="imageDelete" parameterType="ImageFile">
DELETE FROM article_file
WHERE articlefileId = #{value}
</delete>


<!-- 게시물 보기 -->
<select id="boardList" parameterType="long" resultType="Article">
SELECT A.articleId,
	A.regDate,
	A.updateDate,
	A.title,
	A.BODY,
	A.hit,
	A.STATUS,
	A.children,
	A.parant_id AS patantId,
	A.board_id AS boardId,
	A.writer_id AS writerId,
	B.nickname,
	A.suspend
	
FROM    `article` A INNER JOIN `member` B
ON A.writer_id = B.memberId

WHERE articleId = #{articleId}
</select>

<!-- 게시물 등록 -->
<insert id="boardInsert" useGeneratedKeys="true" keyProperty="articleId" parameterType="Article">
INSERT INTO article(
	regDate,
	updateDate,
	title,
	BODY,
	hit,
	STATUS,
	board_id,
	writer_id
<if test="parantId != 0">
	,parant_id
</if>
	)
VALUES (
	NOW(),
	NOW(),
	#{title},
	#{body},
	0,
	#{status},
	#{boardId},
	#{writerId}
<if test="parantId != 0">
	,#{parantId}
</if>
)
</insert>


<!-- 댓글 등록 -->
<insert id="commentInsert" >

INSERT INTO `comment`(
	regDate,
	updateDate,
	BODY,
	STATUS,
	article_id,
	writer_id
    )
VALUES (
	NOW(),
	NOW(),
	#{body},
	'Y',
	#{articleId},
	#{writerId}
)
</insert>
	
<!-- 게시물 조회수 증가 -->
<update id="boardHit" >
UPDATE article
	SET hit = hit + 1
WHERE articleId = #{articleId}
</update>

<!-- 게시물 댓글 수 증가 -->
<update id="childrenHit" parameterType="Article">
UPDATE article
	SET children = children + 1
WHERE articleId = #{articleId}

</update>

<!-- 페이징 처리 -->
<select id="getBoardList" resultType="Article">

SELECT	
	
	a.articleId,
	a.regDate,
	a.title,
	a.BODY,
	a.hit,
	a.STATUS,
	IFNULL(b.children, 0) AS 'children',
	a.board_id AS boardId,
	a.parant_id AS parantId,
	a.writer_id AS writerId,
	a.SUSPEND    
FROM	article a LEFT OUTER JOIN (SELECT
			COUNT(commentId) AS 'children',
			article_id
			FROM	`comment`
			WHERE	STATUS != 'N'
		GROUP BY	article_id
		) b
ON	a.articleId = b.article_id
WHERE	a.STATUS != 'N'
<choose>
	<when test="boardId gte 3">
	AND board_id >= 3
	</when>
	<otherwise>
	AND board_id = #{boardId}
	</otherwise>

</choose>

<if test="search != null">
AND	title LIKE CONCAT('%', #{search} ,'%')
</if>


ORDER BY 
CASE WHEN parant_id IS NULL 
    THEN articleId 
    ELSE parant_id END , 
regDate DESC

LIMIT #{paging.DBsStart}, #{paging.listSize}

</select>
<!-- 전체 페이지 수 -->
<select id="getBoardListCnt" resultType="int">
SELECT
	COUNT(*) AS totalPage
FROM
	article
WHERE	status != 'N'

<choose>
	<when test="boardId gte 3">
	AND board_id >= 3
	</when>
	<otherwise>
	AND board_id = #{boardId}
	</otherwise>

</choose>
<if test="search != null">
AND	title LIKE CONCAT('%', #{search} ,'%')
</if>


</select>


<!-- 게시글 업데이트 -->
<update id="boardUpadte" parameterType="Article" >
UPDATE article

SET	`updateDate` = NOW(),
	`title` = #{title},
	`body` = #{body}

WHERE articleId = #{articleId};


</update>



<!-- 내글 모두 보기 -->
<select id="myList" resultType="Article">
SELECT A.articleId,
	A.regDate,
	A.updateDate,
	A.title,
	A.BODY,
	A.hit,
	A.STATUS,
	A.children,
	A.parant_id AS patantId,
	A.board_id AS boardId,
	A.writer_id AS writerId,
	B.nickname,
	A.suspend
	
FROM    `article` A INNER JOIN `member` B
ON A.writer_id = B.memberId

WHERE board_id = #{boardId}
AND	writer_id = #{memberId}
AND A.status != 'N'
ORDER BY articleId DESC

</select>

<!-- member 확인 -->
<select id="memberVerify"   resultType="LoginInfo">
SELECT *
        FROM loginInfo
        WHERE member_id = #{memberId}

</select>
	
<!-- 댓글 가져오기 -->
<select id="getComment" resultType="Comment">
SELECT *
   FROM `comment`
   WHERE commentId= #{commentId}
   AND	writer_id = #{memberId}
ORDER BY commentId DESC
</select>
	
<update id="deleteComment">
UPDATE `comment`
	SET STATUS='N'
WHERE commentId = #{commentId}
</update>

<!-- 게시물 댓글 수 감소 -->
<update id="deleteChildren">
UPDATE article
	SET children = children -1
WHERE articleId = #{articleId}

</update>
	
<!-- 모든 댓글 가져오기 -->
<select id="getAllComment" resultType="Comment">
SELECT 
	comment.commentId,
	comment.regDate,
	comment.updateDate,
	comment.status,
	comment.body,
	comment.article_id AS 'articleId',
	comment.writer_id AS 'writerId',
	member.nickname,
	comment.suspend
	
FROM `comment` INNER JOIN `member`
ON	comment.writer_id= member.memberId
WHERE  comment.article_id= #{articleId}
AND comment.status != 'N'
</select>
	
<!-- 댓글 신고 -->	
<update id="reportComment">
UPDATE `comment`
	SET STATUS='S',
	suspend = #{suspend}
WHERE commentId = #{commentId}
</update>
<!-- 게시글 신고 -->
<update id="reportArticle">
UPDATE `article`
	SET STATUS='S',
	suspend = #{suspend}
WHERE articleId = #{articleId}
</update>

<!-- 관리자 글 삭제 -->
<update id="deleteArticle">

UPDATE	`article`
SET	STATUS= 'N'
WHERE	articleId = #{articleId}

</update>

<!-- 글삭제시 댓글 삭제 -->
<update id="deleteArticleComment">

UPDATE	`comment`
	SET	STATUS = 'N'
WHERE		article_id = #{articleId}

</update>

<!-- 관리자 question 수 -->
<select id="deleteAdminQuestionCnt" resultType="int">

	SELECT	
	COUNT(a.articleId)
	
	FROM(SELECT	
			a.articleId,
			a.updateDate,
			a.regDate,
			a.title,
			a.BODY AS 'body',
			a.hit,
			a.STATUS AS 'status',
			IFNULL(b.children, 0) AS 'children',
			a.board_id AS boardId,
			a.parant_id AS parantId,
			a.writer_id AS writerId,
			a.SUSPEND AS 'suspend'
		FROM	article a LEFT OUTER JOIN (SELECT
					COUNT(commentId) AS 'children',
					article_id
					FROM	`comment`
					WHERE	STATUS != 'N'
				GROUP BY	article_id
				) b
		ON	a.articleId = b.article_id
		WHERE	board_id >= 3
		AND	board_id != 7
		AND board_id >= 3	
<choose>
	<when test="status == 'ALL'">
		AND	STATUS != 'N'
	</when>
	<otherwise>
		AND	STATUS = 'H'
	</otherwise>
</choose>
		) a

	WHERE	1 =1
<if test="children == 'OFF'">
	AND	children = 0
</if>

<if test="search != null">
	AND	title LIKE CONCAT('%', #{search} ,'%')
</if>

</select>

<!-- 관리자 question 리스트 -->
<select id="deleteAdminQuestion" resultType="Article">


SELECT	
	a.articleId,
	a.regDate,
	a.updateDate,
	a.title,
	a.BODY AS 'body',
	a.hit AS 'hit',
	a.STATUS AS 'status',
	a.children AS 'children',
	a.parantId AS 'parantId',
	a.boardId AS 'boardId',
	a.writerId AS 'writerId',
	a.SUSPEND AS 'suspend'
	
	FROM(SELECT	
			a.articleId,
			a.updateDate,
			a.regDate,
			a.title,
			a.BODY AS 'body',
			a.hit,
			a.STATUS AS 'status',
			IFNULL(b.children, 0) AS 'children',
			a.board_id AS boardId,
			a.parant_id AS parantId,
			a.writer_id AS writerId,
			a.SUSPEND AS 'suspend'
		FROM	article a LEFT OUTER JOIN (SELECT
					COUNT(commentId) AS 'children',
					article_id
					FROM	`comment`
					WHERE	STATUS != 'N'
				GROUP BY	article_id
				) b
		ON	a.articleId = b.article_id
		WHERE	board_id >= 3
			AND	board_id != 7
		AND board_id >= 3
		

<choose>
	<when test="status == 'ALL'">
		AND	STATUS != 'N'
	</when>
	<otherwise>
		AND	STATUS = 'H'
	</otherwise>
</choose>
		
		) a
WHERE	1 =1

<if test="children == 'OFF'">
	AND	children = 0
</if>

<if test="search != null">
	AND	title LIKE CONCAT('%', #{search} ,'%')
</if>

	ORDER BY regDate ASC


LIMIT #{DBsStart}, #{listSize}
</select>

<!-- 신고된 게시판 -->
<select id="suspendArticle" resultType="Article">

SELECT	articleId,
	regDate,
	updateDate,
	title,
	`BODY` AS 'body',
	hit AS 'hit',
	STATUS AS 'status',
	children AS 'children',
	parant_id AS 'parantId',
	board_id AS 'boardId',
	writer_id AS 'writerId',
	SUSPEND AS 'suspend'
	FROM	`article`
	
WHERE	`status` = 'S'

</select>

<select id="suspendComment" resultType="Comment">

SELECT	commentId,
	regDate,
	updateDate,
	`status`,
	BODY,
	article_id AS 'articleId',
	writer_id AS 'writerId',
	SUSPEND
	FROM	`comment`
WHERE	`status` = 'S'

</select>

<!-- 신고관리 article -->
<update id="changeSuspendArticle">
UPDATE	`article`
	SET	`status` = #{status}

<if test='status == "Y"'>
	,`suspend` = NULL
</if>
	
WHERE	articleId= #{tableId}
</update>

<!-- 신고관리 comment -->
<update id="changeSuspendComment">
UPDATE	`comment`
	SET	`status` = #{status}
	
<if test='status == "Y"'>
	,`suspend` = NULL
</if>
	
WHERE	commentId= #{tableId}
</update>

	<select id="selectAllArticlesByMemberId" resultType="Map">
		SELECT *
		FROM `article`
		WHERE writer_id = #{memberId}
		ORDER BY regDate DESC
	</select>

<!-- 답글 가져오기 -->
<select id="getReplyComment" resultType="Article">

SELECT *
	FROM	`article`
WHERE parant_id = #{articleId}
</select>


<select id="getCommentId" resultType="Comment" >
SELECT	
	commentId,
	article_id AS 'articleId',
	writer_id AS 'writerId'
	FROM `comment`
WHERE commentId = #{commentId}

</select>










	
</mapper>